import os
from io import BytesIO
import qrcode, requests
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

TOKEN = os.getenv("8449746552:AAGDJBlNazAHg_UcMWeGMfw99v6rNYX7ukg")
BTC_ADDRESS = os.getenv("BTC_ADDRESS") or "bc1qhs90rgayvff7h50fcmwmlkgk9sdxq58m6pzthd"  # ‚Üê ”©”©—Ä–∏–π–Ω —Ö–∞—è–≥–∞–∞ –æ—Ä—É—É–ª

# –î–∏—Å–ø–ª–µ–π –¥—ç—ç—Ä MNT, –±–æ–¥–∏—Ç BTC-–¥ –∑–æ—Ä–∏—É–ª–∂ USD –¥“Ø–Ω —Ö–∞–¥–≥–∞–ª–Ω–∞
ITEMS = {
    "–î–∞–≤—Å 1 ‚Äì 600,000‚ÇÆ": {"usd": 150, "mnt": 600_000},
    "–î–∞–≤—Å 2 ‚Äì 900,000‚ÇÆ": {"usd": 230, "mnt": 900_000},
    "–î–∞–≤—Å 3 ‚Äì 1,200,000‚ÇÆ": {"usd": 330, "mnt": 1_200_000},
}

def kb_products():
    rows = [[name] for name in ITEMS.keys()]
    rows.append(["üîÅ –¶—ç—Å —à–∏–Ω—ç—á–ª—ç—Ö"])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def fetch_btc_usd_rate():
    """
    CoinGecko-–æ–æ—Å BTC/USD —Ö–∞–Ω—à —Ç–∞—Ç–Ω–∞. –ê–º–∂–∏–ª—Ç–≥“Ø–π –±–æ–ª None –±—É—Ü–∞–∞–Ω–∞.
    """
    try:
        r = requests.get(
            "https://api.coingecko.com/api/v3/simple/price",
            params={"ids": "bitcoin", "vs_currencies": "usd"},
            timeout=6,
        )
        r.raise_for_status()
        data = r.json()
        return float(data["bitcoin"]["usd"])
    except Exception:
        return None

def make_bip21_qr(btc_address: str, amount_btc: float, label: str = "Payment"):
    """
    BIP21 URI “Ø“Ø—Å–≥—ç—ç–¥ QR –±–æ–ª–≥–æ–Ω–æ: bitcoin:<addr>?amount=<btc>&label=<label>
    """
    uri = f"bitcoin:{btc_address}?amount={amount_btc:.8f}&label={label}"
    img = qrcode.make(uri)
    bio = BytesIO()
    bio.name = "btc_payment_qr.png"
    img.save(bio, "PNG")
    bio.seek(0)
    return bio, uri

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–°–∞–π–Ω —É—É! –î–æ–æ—Ä—Ö —Ü—ç—Å—ç—ç—Å –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω—ç—ç —Å–æ–Ω–≥–æ–Ω–æ —É—É üëá",
        reply_markup=kb_products()
    )

def on_text(update: Update, context: CallbackContext):
    text = (update.message.text or "").strip()

    if text in ITEMS:
        usd = ITEMS[text]["usd"]
        mnt = ITEMS[text]["mnt"]

        # –•–∞–Ω—à –∞–≤—á BTC —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö
        rate = fetch_btc_usd_rate()  # 1 BTC = ? USD
        if rate:
            btc_amount = round(usd / rate, 8)  # –¥“Ø–Ω–≥ BTC-—Ä“Ø“Ø
            qr, uri = make_bip21_qr(BTC_ADDRESS, btc_amount, label=text.replace(" ", "_"))
            caption = (
                f"–¢–∞ {text} —Å–æ–Ω–≥–æ–ª–æ–æ.\n\n"
                f"–¢”©–ª–±”©—Ä: {mnt:,}‚ÇÆ (–∂–∏—à—ç—ç –¥—ç–ª–≥—ç—Ü), –±–æ–¥–∏—Ç BTC: ~${usd}\n"
                f"–û–¥–æ–æ–≥–∏–π–Ω —Ö–∞–Ω—à–∞–∞—Ä: {btc_amount} BTC  (1 BTC ‚âà ${rate:,.2f})\n\n"
                f"BTC Address:\n{BTC_ADDRESS}\n\n"
                f"BIP21 URI:\n{uri}"
            )
            update.message.reply_photo(photo=qr, caption=caption)
        else:
            # –•–∞–Ω—à –∞–≤—á —á–∞–¥—Å–∞–Ω–≥“Ø–π ‚Äì —Ö–∞—è–≥ –ª “Ø–∑“Ø“Ø–ª–Ω—ç
            update.message.reply_text(
                f"–¢–∞ {text} —Å–æ–Ω–≥–æ–ª–æ–æ.\n\n"
                f"–¢”©–ª–±”©—Ä: {mnt:,}‚ÇÆ (–∂–∏—à—ç—ç –¥—ç–ª–≥—ç—Ü), –±–æ–¥–∏—Ç BTC –Ω—å ~${usd} –¥“Ø–Ω—Ç—ç–π —Ç—ç–Ω—Ü“Ø“Ø.\n"
                f"–û–¥–æ–æ–≥–æ–æ—Ä —Ö–∞–Ω—à —Ç–∞—Ç–∞–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π. BTC —Ö–∞—è–≥:\n{BTC_ADDRESS}"
            )

    elif text == "üîÅ –¶—ç—Å —à–∏–Ω—ç—á–ª—ç—Ö":
        update.message.reply_text("–¶—ç—Å —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç.", reply_markup=kb_products())
    else:
        update.message.reply_text("–¶—ç—Å–Ω—ç—ç—Å —Å–æ–Ω–≥–æ–Ω–æ —É—É.", reply_markup=kb_products())

def main():
    if not TOKEN:
        raise RuntimeError("BOT_TOKEN —Ç–æ—Ö–∏—Ä—É—É–ª–Ω–∞ —É—É (.env ‚Üí BOT_TOKEN=...)")
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, on_text))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
    
