import os
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

TOKEN = os.getenv("BOT_TOKEN")

# –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω“Ø“Ø–¥ (–Ω—ç—Ä ‚Üí MNT)
PRICES_MNT = {
    "–î–∞–≤—Å 1 ‚Äì 600000‚ÇÆ": 600000,
    "–î–∞–≤—Å 2 ‚Äì 900000‚ÇÆ": 900000,
    "–î–∞–≤—Å 3 ‚Äì 1200000‚ÇÆ": 1200000,
}

def kb_city():
    return ReplyKeyboardMarkup(
        [["–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä"], ["üîÅ –¶—ç—Å —à–∏–Ω—ç—á–ª—ç—Ö"]],
        one_time_keyboard=True, resize_keyboard=True
    )

def kb_products():
    rows = [[k] for k in PRICES_MNT.keys()]
    rows.append(["–ë—É—Ü–∞—Ö"])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def start(update: Update, context: CallbackContext):
    update.message.reply_text("–°–∞–π–Ω —É—É! –•–æ—Ç —Å–æ–Ω–≥–æ–Ω–æ —É—É üëá", reply_markup=kb_city())

def on_text(update: Update, context: CallbackContext):
    text = (update.message.text or "").strip()

    if text == "–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä":
        update.message.reply_text("–ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω“Ø“Ø–¥:", reply_markup=kb_products())
    elif text in PRICES_MNT:
        price = PRICES_MNT[text]
        update.message.reply_text(f"–¢–∞ {text} —Å–æ–Ω–≥–æ–ª–æ–æ. “Æ–Ω—ç: {price}‚ÇÆ")
    elif text in ("üîÅ –¶—ç—Å —à–∏–Ω—ç—á–ª—ç—Ö", "–ë—É—Ü–∞—Ö"):
        update.message.reply_text("–¶—ç—Å —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç.", reply_markup=kb_city())
    else:
        update.message.reply_text("–¢–æ–≤—á–∏–ª—Å–æ–Ω —Ü—ç—Å–Ω—ç—ç—Å —Å–æ–Ω–≥–æ–Ω–æ —É—É.")

def main():
    if not TOKEN:
        raise RuntimeError("BOT_TOKEN —Ç–æ—Ö–∏—Ä—É—É–ª–Ω–∞ —É—É (.env-–¥ BOT_TOKEN=...)")
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, on_text))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
  
