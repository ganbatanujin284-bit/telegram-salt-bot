from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import qrcode
from io import BytesIO
import requests

# === –≠–¥–≥—ç—ç—Ä–∏–π–≥ ”®”®–†–ò–ô–ù–•”®”®–†”®”® —Å–æ–ª–∏–æ—Ä–æ–π ===
TOKEN = "8449746552:AAGEgAhr7fJE-Scqijs4tovIpqo-vQtRGzQ"
BTC_ADDRESS = "bc1qhs90rgayvff7h50fcmwmlkgk9sdxq58m6pzthd"

# –î–∞–≤—Å–Ω—ã “Ø–Ω—ç (USD)
PRICES_USD = {
    "–î–∞–≤—Å 1 ‚Äì $150": 150,
    "–î–∞–≤—Å 2 ‚Äì $230": 230,
    "–î–∞–≤—Å 3 ‚Äì $350": 350,
}

# ---------------- –¢—É—Å–ª–∞—Ö —Ç–æ–≤—á–ª—É—É—Ä—É—É–¥ ----------------
def kb_city():
    return ReplyKeyboardMarkup(
        [["–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä"], ["üîÅ –¶—ç—Å —à–∏–Ω—ç—á–ª—ç—Ö"]],
        one_time_keyboard=True, resize_keyboard=True
    )

def kb_products():
    rows = [[k] for k in PRICES_USD.keys()]
    rows.append(["‚Ü© –ë—É—Ü–∞—Ö", "üîÅ –¶—ç—Å —à–∏–Ω—ç—á–ª—ç—Ö"])
    return ReplyKeyboardMarkup(rows, one_time_keyboard=True, resize_keyboard=True)

def show_main_menu(update: Update, text="–•–æ—Ç —Å–æ–Ω–≥–æ–Ω–æ —É—É üëá"):
    update.message.reply_text(text, reply_markup=kb_city())

# ---------------- BTC —Ö–∞–Ω—à –∞–≤–∞—Ö ----------------
def get_btc_price_usd() -> float:
    """
    Coindesk API-–≥–∞–∞—Å BTC/USD —Ö–∞–Ω—à –∞–≤–∞—Ö.
    –ê–ª–¥–∞–∞ –≥–∞—Ä–≤–∞–ª 0 –±—É—Ü–∞–∞–Ω–∞.
    """
    try:
        r = requests.get("https://api.coindesk.com/v1/bpi/currentprice/USD.json", timeout=10)
        r.raise_for_status()
        data = r.json()
        return float(data["bpi"]["USD"]["rate_float"])
    except Exception:
        return 0.0

# ---------------- –ö–æ–º–∞–Ω–¥—É—É–¥ ----------------
def start(update: Update, context: CallbackContext):
    context.user_data.clear()
    show_main_menu(update, "–°–∞–π–Ω —É—É! –ì–æ–ª —Ü—ç—Å üëá")

def help_cmd(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üß≠ –¢—É—Å–ª–∞–º–∂:\n"
        "- /menu: –ì–æ–ª —Ü—ç—Å —Ä“Ø“Ø –±—É—Ü–∞—Ö\n"
        "- /pay: BTC —Ö–∞—è–≥–∏–π–≥ –¥–∞—Ö–∏–Ω —Ö–∞—Ä–∞—Ö\n"
        "- /paid: –¢”©–ª–±”©—Ä —Ö–∏–π—Å–Ω—ç—ç –º—ç–¥—ç–≥–¥—ç—Ö\n"
    )

def menu_cmd(update: Update, context: CallbackContext):
    context.user_data.clear()
    show_main_menu(update, "–ì–æ–ª —Ü—ç—Å–∏–π–≥ –¥–∞—Ö–∏–Ω –∞—á–∞–∞–ª–ª–∞–≤ ‚úÖ")

def pay_cmd(update: Update, context: CallbackContext):
    update.message.reply_text(f"üí≥ BTC: {BTC_ADDRESS}")

def paid_cmd(update: Update, context: CallbackContext):
    update.message.reply_text("–ë–∞—è—Ä–ª–∞–ª–∞–∞! –¢”©–ª–±”©—Ä —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞. üëå")

# ---------------- –£—Ä—Å–≥–∞–ª ----------------
def handle_city(update: Update, context: CallbackContext):
    city = update.message.text
    if city == "üîÅ –¶—ç—Å —à–∏–Ω—ç—á–ª—ç—Ö":
        return menu_cmd(update, context)

    context.user_data["city"] = city
    update.message.reply_text(
        f"–•–æ—Ç: {city}\n–ë–∞—Ä–∞–∞–≥–∞–∞ —Å–æ–Ω–≥–æ–Ω–æ —É—É üëá", reply_markup=kb_products()
    )

def handle_back_or_refresh(update: Update, context: CallbackContext):
    txt = update.message.text
    if txt == "‚Ü© –ë—É—Ü–∞—Ö":
        context.user_data.pop("city", None)
        show_main_menu(update, "–•–æ—Ç—ã–≥ –¥–∞—Ö–∏–Ω —Å–æ–Ω–≥–æ–Ω–æ —É—É üëá")
    elif txt == "üîÅ –¶—ç—Å —à–∏–Ω—ç—á–ª—ç—Ö":
        menu_cmd(update, context)

def show_payment(update: Update, context: CallbackContext):
    choice = update.message.text
    if choice not in PRICES_USD:
        return  # –±—É—Å–∞–¥ handler –±–∞—Ä–∏–Ω–∞

    usd_amount = PRICES_USD[choice]
    btc_price = get_btc_price_usd()

    if btc_price <= 0:
        update.message.reply_text(
            "‚ö†Ô∏è BTC —Ö–∞–Ω—à –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É /menu",
            reply_markup=kb_products()
        )
        return

    # BTC —Ö—ç–º–∂—ç—ç (6 –æ—Ä–æ–Ω–≥–∏–π–Ω –Ω–∞—Ä–∏–π–≤—á–ª–∞–ª—Ç–∞–π)
    btc_amount = round(usd_amount / btc_price, 6)

    city = context.user_data.get("city", "–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä")
    text = (
        f"–ó–∞—Ö–∏–∞–ª–≥–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞ ‚úÖ\n"
        f"–•–æ—Ç: {city}\n"
        f"–ë–∞—Ä–∞–∞: {choice}\n"
        f"“Æ–Ω—ç: ${usd_amount}\n\n"
        f"üí≥ –¢”©–ª–±”©—Ä (Bitcoin):\n{BTC_ADDRESS}\n"
        f"–ò–ª–≥—ç—ç—Ö —Ö—ç–º–∂—ç—ç: {btc_amount} BTC\n\n"
        "–¢”©–ª–±”©—Ä”©”© —Ö–∏–π—Å–Ω–∏–π –¥–∞—Ä–∞–∞ /paid –≥—ç–∂ –±–∏—á—ç—ç—Ä—ç–π."
    )
    update.message.reply_text(text)

    # BTC QR –∑—É—Ä–∞–≥
    img = qrcode.make(BTC_ADDRESS)
    bio = BytesIO(); bio.name = "btc.png"
    img.save(bio, "PNG"); bio.seek(0)
    update.message.reply_photo(photo=bio, caption="BTC address QR")

# ---------------- –ì–æ–ª app ----------------
def main():
    up = Updater(TOKEN, use_context=True)
    dp = up.dispatcher

    # –ö–æ–º–∞–Ω–¥—É—É–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("menu", menu_cmd))
    dp.add_handler(CommandHandler("help", help_cmd))
    dp.add_handler(CommandHandler("pay", pay_cmd))
    dp.add_handler(CommandHandler("paid", paid_cmd))

    # –ê–ª—Ö–∞–º 1: –•–æ—Ç
    dp.add_handler(MessageHandler(Filters.regex("^–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä$"), handle_city))
    dp.add_handler(MessageHandler(Filters.regex("^üîÅ –¶—ç—Å —à–∏–Ω—ç—á–ª—ç—Ö$"), handle_back_or_refresh))

    # –ê–ª—Ö–∞–º 2: –ë–∞—Ä–∞–∞
    product_regex = "^(" + "|".join(
        p.replace("(", r"\(").replace(")", r"\)") for p in PRICES_USD.keys()
    ) + ")$"
    dp.add_handler(MessageHandler(Filters.regex(product_regex), show_payment))
    dp.add_handler(MessageHandler(Filters.regex("^(‚Ü© –ë—É—Ü–∞—Ö|üîÅ –¶—ç—Å —à–∏–Ω—ç—á–ª—ç—Ö)$"), handle_back_or_refresh))

    up.start_polling()
    up.idle()

if __name__ == "__main__":
    main()
